[
    {
        "label": "database",
        "importPath": "src.data.mongo.connection",
        "description": "src.data.mongo.connection",
        "isExtraImport": true,
        "detail": "src.data.mongo.connection",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "src.data.mongo.connection",
        "description": "src.data.mongo.connection",
        "isExtraImport": true,
        "detail": "src.data.mongo.connection",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "src.data.mongo.connection",
        "description": "src.data.mongo.connection",
        "isExtraImport": true,
        "detail": "src.data.mongo.connection",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "src.data.mongo.connection",
        "description": "src.data.mongo.connection",
        "isExtraImport": true,
        "detail": "src.data.mongo.connection",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "ServerApi",
        "importPath": "pymongo.server_api",
        "description": "pymongo.server_api",
        "isExtraImport": true,
        "detail": "pymongo.server_api",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "src.data.redis.connection",
        "description": "src.data.redis.connection",
        "isExtraImport": true,
        "detail": "src.data.redis.connection",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "src.data.redis.connection",
        "description": "src.data.redis.connection",
        "isExtraImport": true,
        "detail": "src.data.redis.connection",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "src.data.redis.connection",
        "description": "src.data.redis.connection",
        "isExtraImport": true,
        "detail": "src.data.redis.connection",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "src.data.redis.connection",
        "description": "src.data.redis.connection",
        "isExtraImport": true,
        "detail": "src.data.redis.connection",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "pegarTodosUsuariosDoRedis",
        "importPath": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "description": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "isExtraImport": true,
        "detail": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "documentation": {}
    },
    {
        "label": "pegarTodosUsuariosDoRedis",
        "importPath": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "description": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "isExtraImport": true,
        "detail": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "documentation": {}
    },
    {
        "label": "adicionarUsuarioAoMongo",
        "importPath": "src.func.usuario.adicionarUsuarioAoMongo",
        "description": "src.func.usuario.adicionarUsuarioAoMongo",
        "isExtraImport": true,
        "detail": "src.func.usuario.adicionarUsuarioAoMongo",
        "documentation": {}
    },
    {
        "label": "adicionarUsuarioAoMongo",
        "importPath": "src.func.usuario.adicionarUsuarioAoMongo",
        "description": "src.func.usuario.adicionarUsuarioAoMongo",
        "isExtraImport": true,
        "detail": "src.func.usuario.adicionarUsuarioAoMongo",
        "documentation": {}
    },
    {
        "label": "deletarTodosUsuariosRedis",
        "importPath": "src.func.usuario.deletarTodosUsuariosRedis",
        "description": "src.func.usuario.deletarTodosUsuariosRedis",
        "isExtraImport": true,
        "detail": "src.func.usuario.deletarTodosUsuariosRedis",
        "documentation": {}
    },
    {
        "label": "deletarTodosUsuariosRedis",
        "importPath": "src.func.usuario.deletarTodosUsuariosRedis",
        "description": "src.func.usuario.deletarTodosUsuariosRedis",
        "isExtraImport": true,
        "detail": "src.func.usuario.deletarTodosUsuariosRedis",
        "documentation": {}
    },
    {
        "label": "criarMongo",
        "importPath": "src.data.mongo.func.criar",
        "description": "src.data.mongo.func.criar",
        "isExtraImport": true,
        "detail": "src.data.mongo.func.criar",
        "documentation": {}
    },
    {
        "label": "usuarioParaJson",
        "importPath": "src.utils.usuarioParaJson",
        "description": "src.utils.usuarioParaJson",
        "isExtraImport": true,
        "detail": "src.utils.usuarioParaJson",
        "documentation": {}
    },
    {
        "label": "usuarioParaJson",
        "importPath": "src.utils.usuarioParaJson",
        "description": "src.utils.usuarioParaJson",
        "isExtraImport": true,
        "detail": "src.utils.usuarioParaJson",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "src.model.usuario",
        "description": "src.model.usuario",
        "isExtraImport": true,
        "detail": "src.model.usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "src.model.usuario",
        "description": "src.model.usuario",
        "isExtraImport": true,
        "detail": "src.model.usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "src.model.usuario",
        "description": "src.model.usuario",
        "isExtraImport": true,
        "detail": "src.model.usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "src.model.usuario",
        "description": "src.model.usuario",
        "isExtraImport": true,
        "detail": "src.model.usuario",
        "documentation": {}
    },
    {
        "label": "set",
        "importPath": "src.data.redis.func.set",
        "description": "src.data.redis.func.set",
        "isExtraImport": true,
        "detail": "src.data.redis.func.set",
        "documentation": {}
    },
    {
        "label": "criarChave",
        "importPath": "src.func.criarChave",
        "description": "src.func.criarChave",
        "isExtraImport": true,
        "detail": "src.func.criarChave",
        "documentation": {}
    },
    {
        "label": "criarChave",
        "importPath": "src.func.criarChave",
        "description": "src.func.criarChave",
        "isExtraImport": true,
        "detail": "src.func.criarChave",
        "documentation": {}
    },
    {
        "label": "verificarChaveExistente",
        "importPath": "src.func.verificarChaveExistente",
        "description": "src.func.verificarChaveExistente",
        "isExtraImport": true,
        "detail": "src.func.verificarChaveExistente",
        "documentation": {}
    },
    {
        "label": "adicionarUsuarioAoRedis",
        "importPath": "src.func.usuario.adicionarUsuarioAoRedis",
        "description": "src.func.usuario.adicionarUsuarioAoRedis",
        "isExtraImport": true,
        "detail": "src.func.usuario.adicionarUsuarioAoRedis",
        "documentation": {}
    },
    {
        "label": "key",
        "importPath": "src.data.redis.func.keys",
        "description": "src.data.redis.func.keys",
        "isExtraImport": true,
        "detail": "src.data.redis.func.keys",
        "documentation": {}
    },
    {
        "label": "key",
        "importPath": "src.data.redis.func.keys",
        "description": "src.data.redis.func.keys",
        "isExtraImport": true,
        "detail": "src.data.redis.func.keys",
        "documentation": {}
    },
    {
        "label": "key",
        "importPath": "src.data.redis.func.keys",
        "description": "src.data.redis.func.keys",
        "isExtraImport": true,
        "detail": "src.data.redis.func.keys",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "src.data.redis.func.delete",
        "description": "src.data.redis.func.delete",
        "isExtraImport": true,
        "detail": "src.data.redis.func.delete",
        "documentation": {}
    },
    {
        "label": "pegarTodosUsuariosDoMongo",
        "importPath": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "description": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "isExtraImport": true,
        "detail": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "documentation": {}
    },
    {
        "label": "pegarTodosUsuariosDoMongo",
        "importPath": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "description": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "isExtraImport": true,
        "detail": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "documentation": {}
    },
    {
        "label": "moverUsuariosParaMongo",
        "importPath": "src.func.usuario.sincronizacao.moverUsuariosParaMongo",
        "description": "src.func.usuario.sincronizacao.moverUsuariosParaMongo",
        "isExtraImport": true,
        "detail": "src.func.usuario.sincronizacao.moverUsuariosParaMongo",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson.objectid",
        "description": "bson.objectid",
        "isExtraImport": true,
        "detail": "bson.objectid",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson.objectid",
        "description": "bson.objectid",
        "isExtraImport": true,
        "detail": "bson.objectid",
        "documentation": {}
    },
    {
        "label": "buscarMongo",
        "importPath": "src.data.mongo.func.buscar",
        "description": "src.data.mongo.func.buscar",
        "isExtraImport": true,
        "detail": "src.data.mongo.func.buscar",
        "documentation": {}
    },
    {
        "label": "buscarMongo",
        "importPath": "src.data.mongo.func.buscar",
        "description": "src.data.mongo.func.buscar",
        "isExtraImport": true,
        "detail": "src.data.mongo.func.buscar",
        "documentation": {}
    },
    {
        "label": "jsonParaUsuario",
        "importPath": "src.utils.jsonParaUsuario",
        "description": "src.utils.jsonParaUsuario",
        "isExtraImport": true,
        "detail": "src.utils.jsonParaUsuario",
        "documentation": {}
    },
    {
        "label": "jsonParaUsuario",
        "importPath": "src.utils.jsonParaUsuario",
        "description": "src.utils.jsonParaUsuario",
        "isExtraImport": true,
        "detail": "src.utils.jsonParaUsuario",
        "documentation": {}
    },
    {
        "label": "BuscarDados",
        "importPath": "src.func.buscarDados",
        "description": "src.func.buscarDados",
        "isExtraImport": true,
        "detail": "src.func.buscarDados",
        "documentation": {}
    },
    {
        "label": "BuscarDados",
        "importPath": "src.func.buscarDados",
        "description": "src.func.buscarDados",
        "isExtraImport": true,
        "detail": "src.func.buscarDados",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "src.data.redis.func.get",
        "description": "src.data.redis.func.get",
        "isExtraImport": true,
        "detail": "src.data.redis.func.get",
        "documentation": {}
    },
    {
        "label": "limparTerminal",
        "importPath": "src.utils.limparTerminal",
        "description": "src.utils.limparTerminal",
        "isExtraImport": true,
        "detail": "src.utils.limparTerminal",
        "documentation": {}
    },
    {
        "label": "limparTerminal",
        "importPath": "src.utils.limparTerminal",
        "description": "src.utils.limparTerminal",
        "isExtraImport": true,
        "detail": "src.utils.limparTerminal",
        "documentation": {}
    },
    {
        "label": "menuUsuario",
        "importPath": "src.menu.menuUsuario",
        "description": "src.menu.menuUsuario",
        "isExtraImport": true,
        "detail": "src.menu.menuUsuario",
        "documentation": {}
    },
    {
        "label": "cadastrarUsuario",
        "importPath": "src.func.usuario.cadastrarUsuario",
        "description": "src.func.usuario.cadastrarUsuario",
        "isExtraImport": true,
        "detail": "src.func.usuario.cadastrarUsuario",
        "documentation": {}
    },
    {
        "label": "listarUsuario",
        "importPath": "src.func.usuario.listarUsuario",
        "description": "src.func.usuario.listarUsuario",
        "isExtraImport": true,
        "detail": "src.func.usuario.listarUsuario",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "menuPrincipal",
        "importPath": "src.menu.menuPrincipal",
        "description": "src.menu.menuPrincipal",
        "isExtraImport": true,
        "detail": "src.menu.menuPrincipal",
        "documentation": {}
    },
    {
        "label": "atualizarMongo",
        "kind": 2,
        "importPath": "src.data.mongo.func.atualizar",
        "description": "src.data.mongo.func.atualizar",
        "peekOfCode": "def atualizarMongo(colecao, novoDado, filtro):\n    try:\n        database[colecao].update_many(filtro, {\"$set\": novoDado})\n        return \"Documento atualizado com sucesso!\"\n    except Exception as e:\n        return f\"Erro ao atualizar documento: {e}\"",
        "detail": "src.data.mongo.func.atualizar",
        "documentation": {}
    },
    {
        "label": "buscarMongo",
        "kind": 2,
        "importPath": "src.data.mongo.func.buscar",
        "description": "src.data.mongo.func.buscar",
        "peekOfCode": "def buscarMongo(colecao, filtro=None):\n    try:\n        dados = database[colecao].find(filtro)\n        return dados\n    except Exception as e:\n        return None",
        "detail": "src.data.mongo.func.buscar",
        "documentation": {}
    },
    {
        "label": "criarMongo",
        "kind": 2,
        "importPath": "src.data.mongo.func.criar",
        "description": "src.data.mongo.func.criar",
        "peekOfCode": "def criarMongo(colecao, dados):\n    try:\n        database[colecao].insert_one(dados)\n    except Exception as e:\n        print(f\"Erro ao inserir documento! \\n{e}\")\n        input()",
        "detail": "src.data.mongo.func.criar",
        "documentation": {}
    },
    {
        "label": "deletarMongo",
        "kind": 2,
        "importPath": "src.data.mongo.func.deletar",
        "description": "src.data.mongo.func.deletar",
        "peekOfCode": "def deletarMongo(colecao, filtro):\n    try:\n        database[colecao].delete_one(filtro)\n        return \"Documento deletado com sucesso!\"\n    except Exception as e:\n        return \"Erro ao deletar documento!\"\ndef deletarTodosMongo(colecao):\n    try:\n        database[colecao].delete_many({})\n        return \"Documentos deletados com sucesso!\"",
        "detail": "src.data.mongo.func.deletar",
        "documentation": {}
    },
    {
        "label": "deletarTodosMongo",
        "kind": 2,
        "importPath": "src.data.mongo.func.deletar",
        "description": "src.data.mongo.func.deletar",
        "peekOfCode": "def deletarTodosMongo(colecao):\n    try:\n        database[colecao].delete_many({})\n        return \"Documentos deletados com sucesso!\"\n    except Exception as e:\n        return f\"Erro ao deletar documentos: {e}\"",
        "detail": "src.data.mongo.func.deletar",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "src.data.mongo.connection",
        "description": "src.data.mongo.connection",
        "peekOfCode": "client = pymongo.MongoClient(\"mongodb+srv://root:root@fatec.e8bszzd.mongodb.net/?retryWrites=true&w=majority&appName=fatec\", server_api=ServerApi('1'))\ndatabase = client.MercadoLivre",
        "detail": "src.data.mongo.connection",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "src.data.mongo.connection",
        "description": "src.data.mongo.connection",
        "peekOfCode": "database = client.MercadoLivre",
        "detail": "src.data.mongo.connection",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "src.data.redis.func.delete",
        "description": "src.data.redis.func.delete",
        "peekOfCode": "def delete(chave):\n    connection.delete(chave)",
        "detail": "src.data.redis.func.delete",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "src.data.redis.func.get",
        "description": "src.data.redis.func.get",
        "peekOfCode": "def get(chave):\n    try:\n        return json.loads(connection.get(chave))\n    except Exception as e:\n        return None",
        "detail": "src.data.redis.func.get",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 2,
        "importPath": "src.data.redis.func.keys",
        "description": "src.data.redis.func.keys",
        "peekOfCode": "def key(chave):\n    return connection.keys(chave+\"@*\")",
        "detail": "src.data.redis.func.keys",
        "documentation": {}
    },
    {
        "label": "set",
        "kind": 2,
        "importPath": "src.data.redis.func.set",
        "description": "src.data.redis.func.set",
        "peekOfCode": "def set(chave, valor):\n    connection.set(chave, valor)",
        "detail": "src.data.redis.func.set",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "src.data.redis.connection",
        "description": "src.data.redis.connection",
        "peekOfCode": "connection = redis.Redis(\n  host='redis-15624.c241.us-east-1-4.ec2.redns.redis-cloud.com',\n  port=15624,\n  password='iMkKmyB9atTi8PyBAWA2l0JWiFLyKnAV')",
        "detail": "src.data.redis.connection",
        "documentation": {}
    },
    {
        "label": "moverUsuariosParaMongo",
        "kind": 2,
        "importPath": "src.func.usuario.sincronizacao.moverUsuariosParaMongo",
        "description": "src.func.usuario.sincronizacao.moverUsuariosParaMongo",
        "peekOfCode": "def moverUsuariosParaMongo():\n    usuariosRedis = pegarTodosUsuariosDoRedis()\n    for usuario in usuariosRedis:\n        adicionarUsuarioAoMongo(usuario)\n    deletarTodosUsuariosRedis()",
        "detail": "src.func.usuario.sincronizacao.moverUsuariosParaMongo",
        "documentation": {}
    },
    {
        "label": "adicionarUsuarioAoMongo",
        "kind": 2,
        "importPath": "src.func.usuario.adicionarUsuarioAoMongo",
        "description": "src.func.usuario.adicionarUsuarioAoMongo",
        "peekOfCode": "def adicionarUsuarioAoMongo(usuarioJson: Usuario):\n    usuario = usuarioParaJson(usuarioJson, False)\n    criarMongo(\"usuario\", usuario)",
        "detail": "src.func.usuario.adicionarUsuarioAoMongo",
        "documentation": {}
    },
    {
        "label": "adicionarUsuarioAoRedis",
        "kind": 2,
        "importPath": "src.func.usuario.adicionarUsuarioAoRedis",
        "description": "src.func.usuario.adicionarUsuarioAoRedis",
        "peekOfCode": "def adicionarUsuarioAoRedis(usuario: Usuario):\n    usuarioJson = usuarioParaJson(usuario)\n    try:\n        set(usuario.id, usuarioJson)\n        return \"Usuário cadastrado com sucesso!\"\n    except Exception as e:\n        return f\"Erro: {e}\"",
        "detail": "src.func.usuario.adicionarUsuarioAoRedis",
        "documentation": {}
    },
    {
        "label": "cadastrarUsuario",
        "kind": 2,
        "importPath": "src.func.usuario.cadastrarUsuario",
        "description": "src.func.usuario.cadastrarUsuario",
        "peekOfCode": "def cadastrarUsuario():\n    id = criarChave(\"usuario\")\n    if verificarChaveExistente(\"usuario\", id):\n        print(\"Erro: chave já existente\")\n        return\n    nome = str(input(\"Digite o nome do usuário: \"))\n    endereco = str(input(\"Digite o endereço do usuário: \"))\n    rg = str(input(\"Digite o RG do usuário: \"))\n    usuario = Usuario(id, nome, endereco, rg)\n    adicionarUsuarioAoRedis(usuario)",
        "detail": "src.func.usuario.cadastrarUsuario",
        "documentation": {}
    },
    {
        "label": "deletarTodosUsuariosRedis",
        "kind": 2,
        "importPath": "src.func.usuario.deletarTodosUsuariosRedis",
        "description": "src.func.usuario.deletarTodosUsuariosRedis",
        "peekOfCode": "def deletarTodosUsuariosRedis():\n    chaves = key(\"usuario\")\n    for chave in chaves:\n        try:\n            delete(chave)\n        except:\n            print(f\"Ocorreu um erro ao deletar a chave {chave}\")",
        "detail": "src.func.usuario.deletarTodosUsuariosRedis",
        "documentation": {}
    },
    {
        "label": "listarUsuario",
        "kind": 2,
        "importPath": "src.func.usuario.listarUsuario",
        "description": "src.func.usuario.listarUsuario",
        "peekOfCode": "def listarUsuario():\n    id = input(\"Digite o id do usuário (deixe em branco para listar todos): \")\n    print()  \n    if (id == \"\"):\n        moverUsuariosParaMongo()\n        listaDeUsuarios = pegarTodosUsuariosDoMongo()\n        for i in range(len(listaDeUsuarios)):\n            print(f\"- ({i+1}/{len(listaDeUsuarios)}) -\")\n            listaDeUsuarios[i].mostrar()\n            input()",
        "detail": "src.func.usuario.listarUsuario",
        "documentation": {}
    },
    {
        "label": "pegarTodosUsuariosDoMongo",
        "kind": 2,
        "importPath": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "description": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "peekOfCode": "def pegarTodosUsuariosDoMongo():\n    try:\n        dados = buscarMongo(\"usuario\")\n        listaDeUsuarios = []\n        for usuario in dados:\n            listaDeUsuarios.append(jsonParaUsuario(usuario))    \n    except:\n        listaDeUsuarios = None\n    return listaDeUsuarios",
        "detail": "src.func.usuario.pegarTodosUsuariosDoMongo",
        "documentation": {}
    },
    {
        "label": "pegarTodosUsuariosDoRedis",
        "kind": 2,
        "importPath": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "description": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "peekOfCode": "def pegarTodosUsuariosDoRedis():\n    dados = BuscarDados(\"usuario\")\n    listaDeUsuarios = []\n    for usuario in dados:\n        listaDeUsuarios.append(jsonParaUsuario(usuario))\n    return listaDeUsuarios",
        "detail": "src.func.usuario.pegarTodosUsuariosDoRedis",
        "documentation": {}
    },
    {
        "label": "BuscarDados",
        "kind": 2,
        "importPath": "src.func.buscarDados",
        "description": "src.func.buscarDados",
        "peekOfCode": "def BuscarDados(tipo):\n    chaves = key(tipo)\n    listaDados = []\n    for chave in chaves:\n        dado = get(chave)\n        listaDados.append(dado)\n    return listaDados",
        "detail": "src.func.buscarDados",
        "documentation": {}
    },
    {
        "label": "criarChave",
        "kind": 2,
        "importPath": "src.func.criarChave",
        "description": "src.func.criarChave",
        "peekOfCode": "def criarChave(colecao, chave = None):\n    if chave is None:\n        while True:\n            novaChave = input(\"Digite um id: \")\n            if novaChave == \"\":\n                print(\"Chave inválida\")\n                continue\n            chave = novaChave\n            break\n    chave = colecao + \"@\" + chave.replace(\" \", \"_\").lower()",
        "detail": "src.func.criarChave",
        "documentation": {}
    },
    {
        "label": "verificarChaveExistente",
        "kind": 2,
        "importPath": "src.func.verificarChaveExistente",
        "description": "src.func.verificarChaveExistente",
        "peekOfCode": "def verificarChaveExistente(colecao, chave):\n    chaves = key(colecao)\n    if chave in chaves:\n        return True\n    return False",
        "detail": "src.func.verificarChaveExistente",
        "documentation": {}
    },
    {
        "label": "verificarIdExistente",
        "kind": 2,
        "importPath": "src.func.verificarIdExistente",
        "description": "src.func.verificarIdExistente",
        "peekOfCode": "def verificarIdExistente(colecao, id):\n    dado = buscarMongo(colecao, {\"_id\": ObjectId(id)})\n    if dado is None:\n        return False\n    return True",
        "detail": "src.func.verificarIdExistente",
        "documentation": {}
    },
    {
        "label": "menuPrincipal",
        "kind": 2,
        "importPath": "src.menu.menuPrincipal",
        "description": "src.menu.menuPrincipal",
        "peekOfCode": "def menuPrincipal():\n    while True:\n        limparTerminal()\n        print(\"==\" * 30)\n        print(\"Menu Principal\")\n        # print(\"1 - CRUD Compras\")\n        # print(\"2 - CRUD Produtos\")\n        print(\"3 - CRUD Usuários\")\n        # print(\"4 - CRUD Vendedores\")\n        # print(\"5 - Sincronizar Dados\")",
        "detail": "src.menu.menuPrincipal",
        "documentation": {}
    },
    {
        "label": "menuUsuario",
        "kind": 2,
        "importPath": "src.menu.menuUsuario",
        "description": "src.menu.menuUsuario",
        "peekOfCode": "def menuUsuario():\n    while True:\n        limparTerminal()\n        print(\"=-\" * 30)\n        print(\"Menu Usuários\")\n        print(\"1 - Cadastrar Usuário\")\n        print(\"2 - Listar Usuários\")\n        print(\"3 - Atualizar Usuário\")\n        print(\"4 - Deletar Usuário\")\n        print(\"0 - Voltar\")",
        "detail": "src.menu.menuUsuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "kind": 6,
        "importPath": "src.model.usuario",
        "description": "src.model.usuario",
        "peekOfCode": "class Usuario():\n    def __init__(self, id, nome:str, endereco:str, rg:str) -> None:\n        self.id = id\n        self.nome = nome\n        self.endereco = endereco\n        self.rg = rg\n    def atualizar(self, usuario):\n        if usuario.id != \"\":\n            self.setId(usuario.id)\n        if usuario.nome != \"\":",
        "detail": "src.model.usuario",
        "documentation": {}
    },
    {
        "label": "jsonParaUsuario",
        "kind": 2,
        "importPath": "src.utils.jsonParaUsuario",
        "description": "src.utils.jsonParaUsuario",
        "peekOfCode": "def jsonParaUsuario(usuarioJson):\n    usuario = Usuario(usuarioJson[\"_id\"], usuarioJson[\"nome\"], usuarioJson[\"endereco\"], usuarioJson[\"rg\"])\n    return usuario",
        "detail": "src.utils.jsonParaUsuario",
        "documentation": {}
    },
    {
        "label": "limparTerminal",
        "kind": 2,
        "importPath": "src.utils.limparTerminal",
        "description": "src.utils.limparTerminal",
        "peekOfCode": "def limparTerminal():\n    os.system(\"cls\")",
        "detail": "src.utils.limparTerminal",
        "documentation": {}
    },
    {
        "label": "usuarioParaJson",
        "kind": 2,
        "importPath": "src.utils.usuarioParaJson",
        "description": "src.utils.usuarioParaJson",
        "peekOfCode": "def usuarioParaJson(usuario, hasId = True):\n    if hasId:\n        usuarioJson = {\n            \"_id\": usuario.id,\n            \"nome\": usuario.nome,\n            \"endereco\": usuario.endereco,\n            \"rg\": usuario.rg\n        }\n        return json.dumps(usuarioJson)\n    if not hasId:",
        "detail": "src.utils.usuarioParaJson",
        "documentation": {}
    },
    {
        "label": "usuarios",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "usuarios = pegarTodosUsuariosDoMongo()\nfor usuario in usuarios:\n    usuario.mostrar()",
        "detail": "test",
        "documentation": {}
    }
]